Formオブジェクトパターンの実践方法を身につける。
今回作成するのは、ユーザーが寄付をするアプリケーションです、以下のような流れで使われることを想定する。
ユーザー情報を保存→住所寄付金額を送信→受領証明書の発送(実装しない)

新規登録してログインした「ユーザー」は、「寄付金額」と、受領証明書を受け取るための「住所」をフォームに入力する。
ユーザー情報は「usersテーブル」へ、「寄付金額」は「donationsテーブル」へ、住所は「addressesテーブル」へ保存される。
これまで作成してきたアプリケーションにおいては、１つのフォームから送信された情報は１つのテーブルに保存されていました。
例えばPicTweetにおいて、ツイートを投稿する時には新規投稿画面のフォームからtweetsテーブルへ、コメントを投稿する時には詳細画面のフォームからcommentsテーブルへ保存していました。
一方で、DonationAppにおいては、「寄付金額」と「住所」を１つのフォームから送信して、それぞれのテーブルへ保存します。

DB設計の確認
ここで、DonationAppのDB設計にも触れておきましょう
このアプリでは、「ユーザー」「寄付金額」「住所」についての情報を扱う。
したがって、３つのテーブルを作成する必要がある。扱う情報とそれらの関連性を整理しながら、どのようなテーブルを作成すれば良いか確認にしておきましょう。

ユーザー(usersテーブル)
| 属性             | テーブル定義                               | 条件                           |
| 名前             | string型, カラム名はname                   | 必須                           |
| 読みがな          | string型, カラム名はname_reading           | 必須,全角カタカナであること       |
| ニックネーム       | string型,カラム名はnickname               | 必須,半角英数字であること         |

寄付金額(donationsテーブル)
| 属性           | テーブル定義                      | 条件      |
| 金額           | integer型,カラム名はprice         | 必須      |


住所（addressesテーブル)
| 属性           | テーブル定義                     | 条件        |
| 郵便番号        | string型,カラム名はpostal_code   | 必須        |
| 都道府県        | integer型,カラム名はprefecture   | 必須        |
| 市町村          | string型,カラム名はcity          |            |
| 丁目、番地、号   | string型,カラム名はhouse_number   |           |
| 建物名          | string型,カラム名はbuilding_name |            |

情報の関連性
| 情報                            | 関連性           |
| ユーザーと寄付金額                 | 1対多           |
| 寄付金額と住所                    | 1対1            |


事前準備のテーブル定義で確認したように、usersテーブには入力必須のカラムや、保存できる文字の制限が存在する。
テーブル定義にそった適切なユーザー情報が保存できるよう、バリデーションを設定しましょう。

設定する時、複数のバリデーションに共通の制限をかけたい場合があります。
そのような場合には、with_optionsを使用すると便利

・with_options
複数のバリデーションをクループ化し、共通の制限をかけるためのメソッドです。
さらに、formatヘルパーを使用することで、正規表現を用いた条件を設定することができる。

・format
formatは、withオプションに指定された正規表現とその属性の値がマッチするかどうかをチェックする。
マッチしない場合は、messageオプションに指定された文字列をエラ〜メッセージとする。

| 正規表現                     | 意味                                         |
| /\A[ぁ-んァ-ヶー-龥々ー]+\z/  | 1文字以上の全角ひらがな、全角カタカナ、漢字にマッチ  | 
| /\A[ァ-ヶー]+\z/            | 1文字以上の全角カタカナにマッチ                   |
| /\A[a-z0-9]+\z/i           | 1文字以上の半角英数にマッチ(大文字小文字とわない)    |



アソシエーションとはモデルの間の操作を共通化することで、より簡単なコードで情報の参照を行うためのもので、
DonationAppでは、寄付情報に紐づく住所から都道府県を表示させる実装は行わない、すなわち、addressとprefecture間
の操作は行わない、したがってAddressとPrefectureの間にアソシエーションは定義しない。

これまで作成したアプリでは、フォームでmodelオプションを指定していたため、ハッシュが二重構造になっていました。
一方、DonationAppでは、フォームでmodelオプションを指定していないため、1つのハッシュの中に複数のテーブルに関する情報が入っている。
これらの情報を、ストロングパラメーターを用いて適切に取得する必要がある。


address_paramsに注目する、donation_idをmergeしている。
Adressモデルでは、Donationモデルへbelongs_toのアソシエーションを設定しているのでaddessesテーブルへ住所情報を保存するためには、どの寄付情報に紐づくのかを表す、donation_idが必要です
したがって、先にdonationsテーブルへ保存し、23行目で保存済みのインスタンスのidをdonation_idの値として指定している。



numericality
指定されたカラムに対して「数値」かどうかを検証するヘルパーです。
また、オプションでonly_integer: trueを指定すると、「整数のみ」という制限を加えることができる。

寄付機能は一旦完了したが、まだ重要な課題がある。
例えば、一度のフォーム送信で、複数のモデルに設置されたバリデーションを通過する必要があります。
また、送信した内容がバリデーションを通過せず保存できなかった場合、目数のモデルについてのエラ〜メッセージを表示しなければならない。

しかし、上記のような内容をこれまで学んだ方法で実装すると、複雑かつ非効率な記述になってしまいます。
複数のモデルのインスタンスをコントローラーやビューで扱うためです。

Formオブジェクトパターンでの実装
ここまでの作業で、「ユーザー情報」「住所」「寄付金額」についてそれぞれ別のテーブルへ保存することを実現できました。

しかし、これまで学習してきたRailsの基本に則った実装方法だけでは、先程抱えたような課題を抱えてしまった。
これはこれまで他の多くのプログラマーも抱えた課題であり、この課題を解決するための技法が存在する。
その内の１つがFormオブジェクトパターンです

Formオブジェクトパターン
Formオブジェクトパターンとは、Railsを利用する開発における実装パターンです。
発展カリキュラムでも「Formオブジェクト」という文言で紹介しました。
そのFormオブジェクトを実装するにあたっての考え方が、Formオブジェクトパターンです。

このFormオブジェクトパターンは、1つのフォーム送信で複数のモデルを操作したい場合や、テーブルに保存しない情報にバリデーションを設定したい場合に使う。

つまり、モデルに近しい機能を持ったクラスを新たに作成し、そのクラスに複数のテーブルへ保存させる処理や、バリデーションを記述する、という方法です。

すなわち、newアクションで生成したインスタンスをform_withのmodelオプションに指定することや、インスタンスに対してバリデーションを実行することができる。

このようにフォームについての機能(バリデーションやmodelオプションの引数となれる機能)をまとめたオブジェクトを作成するため、Formオブジェクトパターンと呼ぶ。

Formオブジェクトは、以下の手順で実装する。

手順１,新たにmodelsディレクトリ直下にファイルを作成し、クラスを定義する。

手順２、作成したクラスにform_withメソッドに体操する機能とバリデーションを行う機能を持たせる。

手順３、保存したい複数のテーブルのカラム名全てを属性値として扱える様にする。

手順４、バリデーションの処理をかく

手順５、データをテーブルに保存する処理を書く

手順６、コントローラーのnewアクション、createアクションでFormオブジェクトのインスタンスを生成する様にする。

手順７、フォーム作成の部分をFormオブジェクトのインスタンスを引数として渡す形に変更する。

class DonationAddress

  include ActiveModel::Model
  attr_accessor :postal_code, :prefecture, :city, :house_number, :building_name, :price, :user_id

  # ここにバリデーションの処理を書く

  def save
    # 各テーブルにデータを保存する処理を書く
  end
end

先に、手順２で必要となる「include ActiveModel::Model」という記述について説明する。

ActiveModel::Model
クラスにActiveMOdel::Modelをincludeすると、そのクラスのインスタンスは、ActiveRecordを継承したクラスのインスタンスと同様にform_withやrenderなどのヘルパーメソッドの引数として扱え、バリデーションの機能を使用できる様になる。

Formオブジェクトパターンを実装するためにActiveModel::Modelをincludeしたクラスのことを「Formオブジェクト」と呼ぶこともある。


new,createアクションでFormオブジェクトのインスタンスを生成する理由は２つあり、

1.Formオブジェクトのインスタンスをform_withのmodelオプションに指定するため
newアクションで生成するインスタンス変数は、new.html.erb内でも使用できる。

すなわち、newアクションで生成したインスタンスは、form_withのmodelオブションに指定できるということです。
そうすることによって、Formオブジェクトのインスタンスに紐づいたフォームを作成することができる。

2. 入力した内容やエラーメッセージをフォームで表示させるため
createアクションで生成したインスタンスと、理由1で説明したform_withのmodelオプションによって実現される。

crateアクションでエラーハンドリングしていた場合、ストロングパラメーターによって値を取得したインスタンスが、renderで表示されたビューのmodelオプションで指定される。
エラーハンドリングで表示されるフォームは、理由１によってFormオブジェクトのインスタンスに紐づいているため、送信前に入力した内容や、インスタンスに起こっているエラーを表示できる。

さらに、フォームがFormオブジェクトのインスタンスに紐づくことにより、送信されるパラメーターは、donation_addressハッシュを含む２重構造になる。

改めて、Formオブジェクトパターンによって何がどのようによくなったのかを確認する。

今回の実装の目的は「1つのフォームから送られてきた情報を分けて、複数のテーブルに保存する」ということでした、
そのために、コントローラーのcreateアクションの中でそれぞれのテーブルへの保存処理を行いました。

class DonationsController < ApplicationController
  before_action :authenticate_user!, except: :index
  def index
  end

  def new
  end

  def create
    @donation = Donation.create(donation_params)
    Address.create(address_params)
    redirect_to root_path
  end

  private

  def donation_params
    params.permit(:price).merge(user_id: current_user.id)
  end

  def address_params
    params.permit(:postal_code, :prefecture, :city, :house_number, :building_name).merge(donation_id: @donation.id)
  end
end

しかしこの実装方法だと、もし入力情報に不備があった場合にエラーメッセージの表示されないことや、戻された新規寄付ページで最初から入力する必要があることなどの課題が存在する。

そこで、Formオブジェクトパターンを利用しました、保存したい情報を１つにまとめたオブジェクトを作成し、
これにバリデーションを行う機能やform_withメソッドに対応する機能を取り付けました。これで、もし
ユーザーが間違った入力をしてしまっても、エラ〜メッセージを表示することが可能となり、スムーズに再入力を求めることが可能となりました。

